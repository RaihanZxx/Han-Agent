----- Panduan Khusus: Pengembangan Modul Magisk/KernelSU -----
Ketika diminta untuk membuat atau memodifikasi modul Magisk atau KernelSU, saya harus mengikuti struktur dan proses berikut:

**1. Tujuan Modul:**
Modul Magisk/KernelSU bertujuan untuk memodifikasi sistem Android tanpa mengubah partisi sistem secara permanen. Ini dilakukan dengan membuat ZIP yang dapat di-flash yang akan memasang overlay pada `/system` atau menjalankan skrip saat boot.

**2. Struktur Dasar Modul:**
Sebuah modul Magisk/KernelSU dasar biasanya memiliki struktur sebagai berikut:


<module_name>/
├── module.prop
├── customize.sh
├── post-fs-data.sh (opsional, untuk skrip early boot)
├── service.sh (opsional, untuk skrip late boot)
├── system/ (direktori overlay, misalnya system/bin/, system/etc/)
└── <opsional_file_lainnya>

**3. File Penting dan Fungsinya:**

*   **`module.prop`**: File metadata. HARUS ada dan berisi:
    *   `id=<UNIQUE_ID>` (contoh: `my_new_module`)
    *   `name=<Nama Modul>` (contoh: `My New Module`)
    *   `version=<Versi>` (contoh: `v1.0`)
    *   `versionCode=<Kode Versi Integer>` (contoh: `100`)
    *   `author=<Nama Anda>`
    *   `description=<Deskripsi singkat>` (opsional)
    *   `minApi=<SDK Minimum>` (opsional, contoh: `21`)
    *   `maxApi=<SDK Maksimum>` (opsional, contoh: `33`)

*   **`customize.sh`**: Skrip instalasi utama. Dijalankan selama proses flashing.
    *   Bertanggung jawab untuk menyalin file, mengatur izin, dan menampilkan pesan kepada pengguna.
    *   Variabel penting yang disediakan oleh Magisk/KernelSU:
        *   `MODPATH`: Direktori tempat modul diinstal (misal: `/data/adb/modules/<id_modul>`). Gunakan ini sebagai tujuan untuk menyalin file Anda.
        *   `ui_print <message>`: Untuk menampilkan pesan kepada pengguna di recovery/terminal.
    *   Contoh penggunaan:
        *   `ui_print "Menyalin file..."`
        *   `cp -f "$MODPATH/system/bin/my_script.sh" /data/adb/modules/<id_modul>/system/bin/` (ini salah! harusnya: `cp -f my_script.sh "$MODPATH/system/bin/"`)
        *   `set_perm_recursive 0 0 0755 0644 "$MODPATH"` (ini adalah helper Magisk, AI harus menulis sendiri `chmod` jika tidak ada helper)
        *   **AI harus menggunakan `execute_command('cp', ['source', 'destination'])`, `execute_command('chmod', ['mode', 'path'])`, dll.**
        *   Pastikan semua skrip shell di dalam modul (`customize.sh`, `post-fs-data.sh`, `service.sh`) memiliki izin eksekusi (`chmod +x`).

*   **`post-fs-data.sh`**: Skrip yang dijalankan sangat awal saat boot (setelah `/data` dipasang). Berguna untuk modifikasi yang membutuhkan akses ke `/data` sebelum layanan sistem lainnya dimulai.

*   **`service.sh`**: Skrip yang dijalankan lebih lambat saat boot (setelah sebagian besar layanan sistem dimulai).

*   **`system/` direktori**: Ini adalah direktori overlay. File di dalamnya akan disalin ke lokasi yang sesuai di `/system` perangkat. Contoh:
    *   `system/bin/my_custom_binary` akan disalin ke `/system/bin/my_custom_binary`
    *   `system/etc/hosts` akan disalin ke `/system/etc/hosts`

**4. Proses Pembuatan Modul (Langkah AI):**

1.  **Buat Direktori Utama Modul:** `create_directory('my_module_name')`
2.  **Buat Subdirektori Penting:** `create_directory('my_module_name/system/bin')`, `create_directory('my_module_name/system/etc')`, dll. sesuai kebutuhan.
3.  **Tulis `module.prop`:** Gunakan `write_file('my_module_name/module.prop', '<konten>')`.
4.  **Tulis `customize.sh`:** Gunakan `write_file('my_module_name/customize.sh', '<konten>')`. Pastikan skrip ini jelas dan logis. Setelah ditulis, pastikan untuk membuat `customize.sh` dapat dieksekusi: `execute_command('chmod', ['+x', 'my_module_name/customize.sh'])`.
5.  **Tulis Skrip Boot (jika perlu):** Gunakan `write_file('my_module_name/post-fs-data.sh', '<konten>')` dan/atau `write_file('my_module_name/service.sh', '<konten>')`. Juga buat executable.
6.  **Tulis File Overlay:** Gunakan `write_file('my_module_name/system/bin/my_binary_script.sh', '<konten>')` atau `write_file('my_module_name/system/etc/my_config.xml', '<konten>')`, dll. Pastikan skrip binary memiliki izin eksekusi.
7.  **Kompres menjadi ZIP:** Gunakan `create_zip_archive(['my_module_name'], 'my_module_name.zip')`. Ini akan mengemas seluruh direktori modul ke dalam file ZIP yang dapat di-flash.

**5. Debugging:**
*   Jika ada masalah saat instalasi modul, periksa log Magisk/KernelSU di perangkat.
*   Jika ada masalah dengan skrip (misal: `customize.sh`), debug skrip tersebut dengan menjalankan bagian-bagiannya secara manual melalui `execute_command('sh', ['-c', 'echo "test"'])` atau simulasikan operasi file.
*   Pastikan semua jalur relatif di dalam skrip shell merujuk ke lokasi yang benar di dalam `$MODPATH`.